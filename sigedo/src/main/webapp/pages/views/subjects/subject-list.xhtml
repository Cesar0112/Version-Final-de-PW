<html
  xmlns="http://www.w3.org/1999/xhtml"
  xmlns:h="http://java.sun.com/jsf/html"
  xmlns:f="http://java.sun.com/jsf/core"
  xmlns:ui="http://java.sun.com/jsf/facelets"
  xmlns:p="http://primefaces.org/ui"
>
  <ui:composition template="/pages/template/layout.xhtml">
    <ui:define name="title"> Listado de asignaturas </ui:define>
    <ui:define name="layout">
      <h:form id="form">
        <div class="card crud-demo">
          <p:toolbar>
            <p:toolbarGroup>
              <!-- 
					    * La propiedad action y actionListener de los botones apunta a un method en el bean de jsf, ese method
					      por lo general es de tipo void porque se está trabajando con AJAX.
					    * La propiedad update permite refrescar componentes luego de ejecutarse el code definido en el action. Si son varios
					      componente poner los Ids separados por coma.
					    * La propiedad onComplete ejecuta un code en Javascript una vez finalizada el action del button. También es posible ejecutar
					      code en Javascript desde el bean de Jsf
					    -->
              <p:commandButton
                value="Nuevo"
                icon="pi pi-plus"
                actionListener="#{manageSubjectBean.openNew}"
                update=":form:manage-subject-content"
                oncomplete="PF('manageSubjectDialog').show()"
                styleClass="ui-button-success"
                style="margin-right: 0.5rem"
              >
                <p:resetInput target=":form:manage-subject-content" />
              </p:commandButton>
            </p:toolbarGroup>
          </p:toolbar>

          <!-- Componente usado para mostrar tablas con datos y ejecutar operaciones
                	* La propiedad value: apunta a una lista de objetos de tipo StudentDto que está en el bean de jsf
                	* La propiedad var: es una instancia de esta lista para poder extaer los objetos, es como iterador
                	  que luego permite poder decir Student.<propiedad del objeto>.
                	* La propiedad paginator: define si se quiere paginar o no y es posible definir la position del mismo usando
                	  la propiedad pagePosition.
                    * La propiedad rows: define la cantidad de filas
                	* El facet header define un encabezado y agrega un button para filtrar. Por defecto esto lo hace el solo, si quieren algo
                	  con mayor detalle ver el showcase.  
                 -->
          <p:dataTable
            id="dt-subject"
            widgetVar="dtSubject"
            var="subject"
            value="#{manageSubjectBean.subjects}"
            reflow="true"
            paginator="true"
            rows="10"
            paginatorPosition="bottom"
          >
            <f:facet name="header">
              <div class="products-table-header">
                <span style="font-weight: bold">Asignaturas</span>
                <span class="filter-container ui-input-icon-left">
                  <i class="pi pi-search"></i>
                  <p:inputText
                    id="globalFilter"
                    onkeyup="PF('dtSubject').filter()"
                    placeholder="Buscar"
                  />
                </span>
              </div>
            </f:facet>

            <!-- Columna de los nombres de las asignaturas -->
            <p:column
              headerText="Nombres"
              sortBy="#{subject.nameSubject}"
              filterBy="#{subject.nameSubject}"
            >
              <h:outputText value="#{subject.nameSubject}" />
            </p:column>

            <!-- Columna de la cantidad de horas clase -->
            <p:column headerText="Cantidad de horas" sortBy="#{subject.hours}">
              <h:outputText value="#{subject.hours}" />
            </p:column>

            <!-- Columna del Año academico -->
            <p:column
              headerText="Año académico"
              sortBy="#{subject.year}"
              filterBy="#{subject.year}"
            >
              <h:outputText value="#{subject.year}" />
            </p:column>
            
            <p:column exportable="false">
              <p:commandButton
                icon="pi pi-pencil"
                action="#{manageSubjectBean.openForEdit}"
                update=":form:manage-subject-content"
                oncomplete="PF('manageSubjectDialog').show()"
                styleClass="edit-button rounded-button ui-button-success"
                process="@this"
              >
                <f:setPropertyActionListener
                  value="#{subject}"
                  target="#{manageSubjectBean.selectedSubject}"
                />
                <p:resetInput target=":form:manage-subject-content" />
              </p:commandButton>
              <p:commandButton
                class="ui-button-warning rounded-button"
                icon="pi pi-trash"
                process="@this"
                action="#{manageSubjectBean.deleteSubject}"
              >
                <f:setPropertyActionListener
                  value="#{subject}"
                  target="#{manageSubjectBean.selectedSubject}"
                />
                <p:confirm
                  header="Confirmar"
                  message="Está seguro de eliminar la asignatura?"
                  icon="pi pi-exclamation-triangle"
                />
              </p:commandButton>
            </p:column>
          </p:dataTable>

          <!-- ui:include es una etiqueta de facelet que permite incluir pages y de esta forma el code no se carga tanto -->
          <ui:include src="subject-form.xhtml"></ui:include>

          <!-- Este comoponente se utiliza mucho para el caso de los eliminar, que es donde casi siempre se necesita confirmation,
				su uso es bien sencillo, cada confirmDialog va atado a un p:confirm que es el que se definie dentro del button -->
          <p:confirmDialog global="true" showEffect="fade" width="300">
            <p:commandButton
              value="Si"
              type="button"
              styleClass="ui-confirmdialog-yes"
              icon="pi pi-check"
            />
            <p:commandButton
              value="No"
              type="button"
              styleClass="ui-confirmdialog-no ui-button-secondary"
              icon="pi pi-times"
            />
          </p:confirmDialog>
        </div>
      </h:form>
    </ui:define>
  </ui:composition>
</html>
